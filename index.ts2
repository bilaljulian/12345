import express, { Request, Response, NextFunction } from 'express';
import bodyParser from 'body-parser';
import mongoose from 'mongoose';
import session from 'express-session';
import passport from 'passport';
import LocalStrategy from 'passport-local';
import bcrypt from 'bcrypt';
import flash from 'connect-flash';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

// Models
import User from './models/User';
import Item from './models/Item';
import Transaction from './models/Transaction';

// Initialize Express
const app = express();
const port = process.env.PORT || 3000;

// Middleware setup
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Session setup
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: false
}));

// Flash messages
app.use(flash());

// Passport setup
passport.use(new LocalStrategy(async (username, password, done) => {
  try {
    const user = await User.findOne({ username });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return done(null, false, { message: 'Invalid username or password' });
    }
    return done(null, user);
  } catch (err) {
    return done(err);
  }
}));

passport.serializeUser((user: any, done) => {
  done(null, user.id);
});

passport.deserializeUser(async (id: string, done) => {
  try {
    const user = await User.findById(id);
    done(null, user);
  } catch (err) {
    done(err);
  }
});

app.use(passport.initialize());
app.use(passport.session());

// Routes
app.get('/', async (req: Request, res: Response) => {
  try {
    const items = await Item.find().limit(10);
    res.render('index', { items, user: req.user });
  } catch (err) {
    res.status(500).send('Error retrieving items');
  }
});

app.post('/login', passport.authenticate('local', {
  successRedirect: '/',
  failureRedirect: '/login',
  failureFlash: true
}));

app.post('/register', async (req: Request, res: Response) => {
  try {
    const { username, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, password: hashedPassword });
    await user.save();
    res.redirect('/login');
  } catch (err) {
    res.status(500).send('Error registering user');
  }
});

app.post('/item', async (req: Request, res: Response) => {
  try {
    const { title, description, pictureUrl, price } = req.body;
    const item = new Item({ title, description, pictureUrl, price });
    await item.save();
    res.redirect('/');
  } catch (err) {
    res.status(500).send('Error adding item');
  }
});

app.post('/purchase', async (req: Request, res: Response) => {
  try {
    const { itemId, paymentDetails } = req.body;
    const item = await Item.findById(itemId);
    
    if (!item) {
      return res.status(404).send('Item not found');
    }

    // Handle payment integration here (e.g., Stripe API)
    // Assuming payment is successful
    const transaction = new Transaction({
      item: itemId,
      user: req.user?.id,
      amount: item.price,
      paymentDetails
    });
    await transaction.save();

    res.redirect('/');
  } catch (err) {
    res.status(500).send('Error processing purchase');
  }
});

app.get('/profile', (req: Request, res: Response) => {
  if (!req.user) {
    return res.redirect('/login');
  }
  res.render('profile', { user: req.user });
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

// Error handling
app.use((err: any, req: Request, res: Response, next: NextFunction) => {
  console.error(err.stack);
  res.status(500).send('Something went wrong!');
});
npm install express body-parser mongoose express-session passport passport-local bcrypt connect-flash ejs
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

export default mongoose.model('User', userSchema);
import mongoose from 'mongoose';

const itemSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  pictureUrl: { type: String, required: true },
  price: { type: Number, required: true }
});

export default mongoose.model('Item', itemSchema);
import mongoose from 'mongoose';

const transactionSchema = new mongoose.Schema({
  item: { type: mongoose.Schema.Types.ObjectId, ref: 'Item', required: true },
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  paymentDetails: { type: Object, required: true }
});

export default mongoose.model('Transaction', transactionSchema);
