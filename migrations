-- Create users table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    password_hash VARCHAR(255) NOT NULL,
    zip VARCHAR(10),
    city VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create items table
CREATE TABLE items (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    picture_url TEXT,
    price DECIMAL(10, 2) NOT NULL,
    user_id INT REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create categories table
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Create item_category junction table
CREATE TABLE item_category (
    item_id INT REFERENCES items(id),
    category_id INT REFERENCES categories(id),
    PRIMARY KEY (item_id, category_id)
);
const express = require('express');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const app = express();
const pool = new Pool({
    user: 'your_db_user',
    host: 'localhost',
    database: 'enull',
    password: 'your_db_password',
    port: 5432,
});

app.use(bodyParser.json());

// User Registration
app.post('/register', async (req, res) => {
    const { name, email, phone, password, zip, city } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    await pool.query('INSERT INTO users (name, email, phone, password_hash, zip, city) VALUES ($1, $2, $3, $4, $5, $6)', 
    [name, email, phone, hashedPassword, zip, city]);
    res.status(201).send('User registered');
});

// User Login
app.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    const user = result.rows[0];
    if (user && await bcrypt.compare(password, user.password_hash)) {
        const token = jwt.sign({ id: user.id }, 'your_jwt_secret');
        res.json({ token });
    } else {
        res.status(401).send('Invalid credentials');
    }
});

// Add Item
app.post('/items', async (req, res) => {
    const { title, description, picture_url, price, user_id } = req.body;
    await pool.query('INSERT INTO items (title, description, picture_url, price, user_id) VALUES ($1, $2, $3, $4, $5)', 
    [title, description, picture_url, price, user_id]);
    res.status(201).send('Item added');
});

// Get Items
app.get('/items', async (req, res) => {
    const result = await pool.query('SELECT * FROM items');
    res.json(result.rows);
});

// Get Item by ID
app.get('/items/:id', async (req, res) => {
    const result = await pool.query('SELECT * FROM items WHERE id = $1', [req.params.id]);
    res.json(result.rows[0]);
});

// Add Category
app.post('/categories', async (req, res) => {
    const { name } = req.body;
    await pool.query('INSERT INTO categories (name) VALUES ($1)', [name]);
    res.status(201).send('Category added');
});

// Assign Category to Item
app.post('/items/:item_id/categories/:category_id', async (req, res) => {
    await pool.query('INSERT INTO item_category (item_id, category_id) VALUES ($1, $2)', 
    [req.params.item_id, req.params.category_id]);
    res.status(201).send('Category assigned to item');
});

app.listen(3000, () => {
    console.log('Server running on port 3000');
});
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const App = () => {
    const [items, setItems] = useState([]);
    const [categories, setCategories] = useState([]);

    useEffect(() => {
        axios.get('/items').then(response => setItems(response.data));
        axios.get('/categories').then(response => setCategories(response.data));
    }, []);

    return (
        <div>
            <header>
                <h1>eNull - Rare Items</h1>
            </header>
            <main>
                <section>
                    <h2>Items</h2>
                    <ul>
                        {items.map(item => (
                            <li key={item.id}>
                                <h3>{item.title}</h3>
                                <img src={item.picture_url} alt={item.title} />
                                <p>{item.description}</p>
                                <p>${item.price}</p>
                            </li>
                        ))}
                    </ul>
                </section>
                <section>
                    <h2>Categories</h2>
                    <ul>
                        {categories.map(category => (
                            <li key={category.id}>{category.name}</li>
                        ))}
                    </ul>
                </section>
            </main>
        </div>
    );
};

export default App;
const authenticateJWT = (req, res, next) => {
    const token = req.headers['authorization'];
    if (token == null) return res.sendStatus(401);

    jwt.verify(token, 'your_jwt_secret', (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
};

// Protect route example
app.post('/items', authenticateJWT, async (req, res) => {
    // Only authenticated users can add items
    const { title, description, picture_url, price } = req.body;
    await pool.query('INSERT INTO items (title, description, picture_url, price, user_id) VALUES ($1, $2, $3, $4, $5)', 
    [title, description, picture_url, price, req.user.id]);
    res.status(201).send('Item added');
});
